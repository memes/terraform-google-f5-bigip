# frozen_string_literal: true

# Performs verification actions on Declarative Onboarding JSON through metadata

require 'base64'
require 'zlib'
require 'stringio'
require 'json'

# rubocop:disable Metrics/BlockLength
control 'generated_base_do' do
  title 'Verify generated DO files in metadata match input variables'

  self_links = input('output_self_links')
  do_payloads = input('input_do_payloads', value: '[]').gsub(/(?:[\[\]]|\\?")/, '').gsub(', ', ',').split(',')
  allow_phone_home = input('input_allow_phone_home', value: 'true').to_s.downcase == 'true'
  extramb = input('input_extramb', value: '2048').to_i
  dns_servers = input('input_dns_servers', value: '["169.254.169.254"]')
                .gsub(/(?:[\[\]]|\\?")/, '').gsub(', ', ',').split(',')
  # TODO: @memes
  # search_domains = input('input_search_domains', value: '[]').gsub(/(?:[\[\]]|\\?")/, '')
  #                  .gsub(', ', ',').split(',')
  ntp_servers = input('input_ntp_servers', value: '["169.254.169.254"]')
                .gsub(/(?:[\[\]]|\\?")/, '').gsub(', ', ',').split(',')
  timezone = input('input_timezone', value: 'UTC')
  modules = input('input_modules', value: '{ltm="nominal"}').gsub(/(?:[{}]|\\?")/, '').gsub(', ',
                                                                                            ',').split(',').map do |p|
    k, v = p.split('=')
    { k => v }
  end.reduce(:merge)

  only_if('DO files were not generated by module') do
    do_payloads.empty?
  end

  self_links.each do |url|
    params = url.match(%r{/projects/(?<project>[^/]+)/zones/(?<zone>[^/]+)/instances/(?<name>.+)$}).named_captures
    describe params['name'] do
      describe 'generated DO payload base parameters' do
        it 'should match input variables' do
          value = google_compute_instance(project: params['project'], zone: params['zone'],
                                          name: params['name']).metadata_value_by_key('do_payload')
          expect(value).not_to be_nil
          expect(value).not_to be_empty
          payload = {}
          expect do
            payload = JSON.parse(Zlib::GzipReader.new(StringIO.new(Base64.decode64(value))).read)
          end.not_to raise_exception
          # Add class to modules hash so 'include' will validate class is correct too
          modules['class'] = 'Provision'
          expect(payload).to include(
            '$schema' => 'https://raw.githubusercontent.com/F5Networks/f5-declarative-onboarding/v1.18.0/src/schema/1.18.0/base.schema.json',
            'schemaVersion' => '1.18.0',
            'class' => 'Device',
            'Common' => include(
              'class' => 'Tenant',
              'system' => include(
                'class' => 'System',
                'autoPhonehome' => allow_phone_home
              ),
              'dbVars' => include(
                'class' => 'DbVariables',
                'provision.extramb' => extramb.to_s
              ),
              'dns' => include(
                'class' => 'DNS',
                'nameServers' => dns_servers
                # TODO: @memes - search domains is dependent on logic
              ),
              'ntp' => include(
                'class' => 'NTP',
                'servers' => ntp_servers,
                'timezone' => timezone
              ),
              'provision' => include(modules)
            )
          )
        end
      end
    end
  end
end
# rubocop:enable Metrics/BlockLength

# rubocop:disable Metrics/BlockLength
control 'generated_networking_do' do
  title 'Verify generated DO files in metadata have correct networking values'

  self_links = input('output_self_links')
  private_addresses = input('output_private_addresses')
  do_payloads = input('input_do_payloads', value: '[]').gsub(/(?:[\[\]]|\\?")/, '').gsub(', ', ',').split(',')
  num_nics = input('input_num_nics').to_i
  reserve_addresses = input('input_reserve_addresses', value: 'false').to_s.downcase == 'true'
  default_gateway = input('input_default_gateway', value: '')

  only_if('instance does not use generated DO for networking config') do
    do_payloads.empty? && num_nics > 1
  end

  self_links.each_with_index do |url, index|
    params = url.match(%r{/projects/(?<project>[^/]+)/zones/(?<zone>[^/]+)/instances/(?<name>.+)$}).named_captures
    common = {}
    describe params['name'] do
      describe 'generated DO networking payload' do
        it 'JSON is valid' do
          value = google_compute_instance(project: params['project'], zone: params['zone'],
                                          name: params['name']).metadata_value_by_key('do_payload')
          expect(value).not_to be_nil
          expect(value).not_to be_empty
          expect do
            payload = JSON.parse(Zlib::GzipReader.new(StringIO.new(Base64.decode64(value))).read)
            common = payload['Common']
          end.not_to raise_exception
          expect(common).not_to be_nil
          expect(common).not_to be_empty
        end
        it 'default gateway' do
          expected_default_gateway = default_gateway.empty? ? 'replace' : default_gateway
          default_gatway = common['default']
          expect(default_gatway).not_to be_nil
          expect(default_gatway).not_to be_empty
          expect(default_gatway).to include(
            'class' => 'Route',
            'gw' => expected_default_gateway,
            'network' => 'default',
            'mtu' => 'replace'
          )
        end
      end

      (0...num_nics).each do |nic|
        next if nic == 1 # Management nic is not touched in DO

        case nic
        when 0
          expected_name = 'external'
          expected_tag = 4093
        when 2
          expected_name = 'internal'
          expected_tag = 4092
        else
          expected_name = "internal#{nic - 2}"
          expected_tag = 4094 - nic
        end
        expected_mtu = 'replace'
        expected_num = "1.#{nic}"
        private_ips = !private_addresses.empty? && private_addresses.length > index ? private_addresses[index] : []
        expected_address = reserve_addresses && private_ips.length > nic ? private_ips[nic] : nil
        describe expected_name do
          it 'VLAN' do
            vlan = common[expected_name.to_s]
            expect(vlan).not_to be_nil
            expect(vlan).not_to be_empty
            expect(vlan).to include(
              'class' => 'VLAN',
              'tag' => expected_tag,
              'mtu' => expected_mtu,
              'interfaces' => [
                include(
                  'name' => expected_num,
                  'tagged' => false
                )
              ]
            )
          end
          it 'private self-ip' do
            self_private = common["#{expected_name}-self"]
            expect(self_private).not_to be_nil
            expect(self_private).not_to be_empty
            expect(self_private).to include(
              'class' => 'SelfIp',
              'address' => expected_address.nil? ? 'replace' : "#{expected_address}/32",
              'vlan' => expected_name.to_s
              # TODO: @memes - allowService and trafficGroup?
            )
          end
          it 'route to gateway' do
            gw = common["#{expected_name}-rt-gw"]
            expect(gw).not_to be_nil
            expect(gw).not_to be_empty
            expect(gw).to include(
              'class' => 'Route',
              'target' => expected_name.to_s,
              'network' => 'replace',
              'mtu' => expected_mtu
            )
          end
          it 'route to network' do
            net = common["#{expected_name}-rt-net"]
            expect(net).not_to be_nil
            expect(net).not_to be_empty
            expect(net).to include(
              'class' => 'Route',
              'gw' => 'replace',
              'network' => 'replace',
              'mtu' => expected_mtu
            )
          end
        end
      end
    end
  end
end
# rubocop:enable Metrics/BlockLength

# rubocop:todo Metrics/BlockLength
control 'provided_do' do
  title 'Verify provided DO files in metadata'

  self_links = input('output_self_links')
  do_payloads = input('input_do_payloads', value: '[]').gsub(/(?:[\[\]]|\\?")/, '').gsub(', ', ',').split(',')

  only_if('DO files not provided by module caller') do
    !do_payloads.empty?
  end

  self_links.each_with_index do |url, index|
    params = url.match(%r{/projects/(?<project>[^/]+)/zones/(?<zone>[^/]+)/instances/(?<name>.+)$}).named_captures
    describe params['name'] do
      describe 'DO payload' do
        it 'JSON is valid and matches provided' do
          value = google_compute_instance(project: params['project'], zone: params['zone'],
                                          name: params['name']).metadata_value_by_key('do_payload')
          expect(value).not_to be_nil
          expect(value).not_to be_empty
          payload = {}
          expect do
            payload = JSON.parse(Zlib::GzipReader.new(StringIO.new(Base64.decode64(value))).read)
          end.not_to raise_exception
          expect(payload).not_to be_nil
          expect(payload).not_to be_empty
          expect(payload).to cmp do_payloads[index % do_payloads.length]
        end
      end
    end
  end
end
# rubocop:enable Metrics/BlockLength

# rubocop:disable Metrics/BlockLength
control 'single_nic_networking_do' do
  title 'Verify generated DO files for single-nic networking'

  self_links = input('output_self_links')
  do_payloads = input('input_do_payloads', value: '[]').gsub(/(?:[\[\]]|\\?")/, '').gsub(', ', ',').split(',')
  num_nics = input('input_num_nics').to_i

  only_if('instance does not use generated DO or is multi-nic') do
    do_payloads.empty? && num_nics < 2
  end

  self_links.each_with_index do |url, _index|
    params = url.match(%r{/projects/(?<project>[^/]+)/zones/(?<zone>[^/]+)/instances/(?<name>.+)$}).named_captures
    describe params['name'] do
      describe 'generated DO networking payload' do
        it 'JSON is valid and does not include networking classes' do
          value = google_compute_instance(project: params['project'], zone: params['zone'],
                                          name: params['name']).metadata_value_by_key('do_payload')
          expect(value).not_to be_nil
          expect(value).not_to be_empty
          common = {}
          expect do
            payload = JSON.parse(Zlib::GzipReader.new(StringIO.new(Base64.decode64(value))).read)
            common = payload['Common']
          end.not_to raise_exception
          expect(common).not_to be_nil
          expect(common).not_to be_empty
          classes = common.map do |_k, v|
            v['class']
          end.reject(&:nil?).uniq
          expect(classes).not_to include('VLAN', 'SelfIp', 'Route')
        end
      end
    end
  end
end
# rubocop:enable Metrics/BlockLength
